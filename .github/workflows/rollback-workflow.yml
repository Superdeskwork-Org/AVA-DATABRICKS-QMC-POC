name: Post-Deployment Approval and Rollback

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Choose action"
        required: true
        type: choice
        options:
          - Approve
          - Reject

jobs:
 rollback-steps:
    runs-on: self-hosted
  
    steps:
      # Step 1: Simulate Manual Approval with Inputs
      - name: Simulate Post-Deployment Approval
        run: |
          echo "Post-deployment approval requested. Waiting for QA approver to approve."
          echo "Selected action: ${{ github.event.inputs.action }}"
          $ACTION = "${{ github.event.inputs.action }}".ToLower()  # Normalize to lowercase in PowerShell
          echo "action=$ACTION" >> $env:GITHUB_ENV

      # Debug Action Variable
      - name: Debug Action Variable
        run: |
          echo "Action variable value: ${{ env.action }}"

      # Step 2: Check Out Repository
      - name: Check Out Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all commits to access the previous commit ID

      # Debug Commit History
      - name: Debug Commit History
        run: |
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Previous commit: $(git rev-parse HEAD^)"

      # Step 3: Post-Deployment Approval
      - name: Simulate Post-Deployment Approval
        run: |
          echo "Selected action: ${{ github.event.inputs.action }}"
          $ACTION = "${{ github.event.inputs.action }}".ToLower()  # Normalize to lowercase in PowerShell
          echo "action=$ACTION" >> $env:GITHUB_ENV
          
# Step 4: Redeploy Application (Rollback Process)
      - name: Revert Changes Without Pushing to Main Branch
        if: env.action == 'reject'
        run: |
          # Ensure the QA directory exists
          if (-Not (Test-Path "QA")) {
            echo "QA directory does not exist. Creating it..."
            New-Item -ItemType Directory -Path "QA"
          }
          cd QA

          # Clone the repository into AVA-DATABRICKS-QMC-POC directory
          if (-Not (Test-Path "AVA-DATABRICKS-QMC-POC")) {
            echo "AVA-DATABRICKS-QMC-POC directory does not exist. Cloning it..."
            git clone --branch main "${{ vars.REPO_PAT }}" AVA-DATABRICKS-QMC-POC
          }
          cd AVA-DATABRICKS-QMC-POC

          # Create a temporary branch for the rollback process
          echo "Creating a temporary branch for rollback..."
          git checkout -b temp-rollback-branch

          # Identify the latest commit ID
          $LATEST_COMMIT_ID = git rev-parse HEAD
          echo "Latest commit ID: $LATEST_COMMIT_ID"

          # Revert the latest commit in the temporary branch
          echo "Reverting the latest commit: $LATEST_COMMIT_ID"
          git revert --no-edit $LATEST_COMMIT_ID

          # Verify the state of the repository after the revert
          echo "Repository state after revert:"
          git log -1 --oneline

          # Synchronize the reverted state with Databricks
          echo "Synchronizing reverted state with Databricks..."
          databricks sync Notebooks /Workspace/Shared/Notebooks

          # Delete the temporary branch after synchronization
          echo "Deleting the temporary branch..."
          git checkout main
          git branch -D temp-rollback-branch

          echo "Deployment reverted successfully."


      # Step 5: Confirm Approval
      - name: Confirm Approval
        if: env.action == 'approve'
        run: |
          echo "Deployment approved. No further action required."
