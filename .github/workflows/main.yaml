name: Databricks Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy-Dev:
    if: github.ref == 'refs/heads/main'
    runs-on: self-hosted
    steps:
      # Step 1: Check if Databricks CLI is installed
      - name: Check if Databricks CLI is installed
        run: |
          if (-not (Get-Command databricks -ErrorAction SilentlyContinue)) {
            Write-Host "Databricks CLI not found. Please install the Databricks CLI on the runner."
          } else {
            Write-Host "Databricks CLI is already installed."
          }

      # Step 2: Authenticate Dev Databricks Workspace
      - name: Authenticate Dev Databricks Workspace
        run: |
          New-Item -ItemType Directory -Force -Path $env:USERPROFILE\.databricks
          @"
          [DEFAULT]
          host = "${{ vars.QA_DATABRICKS_HOST }}"
          client_id = "${{ secrets.QA_DATABRICKS_CLIENT_ID }}"
          client_secret = "${{ secrets.QA_DATABRICKS_CLIENT_SECRET }}"
          "@ | Out-File -FilePath "$env:USERPROFILE\.databrickscfg" -Encoding utf8
          icacls "$env:USERPROFILE\.databrickscfg" /inheritance:r /grant:r "$env:USERNAME`:F"
          databricks auth profiles

      # Step 3: Download Files from Remote Repository to Local Workspace
      - name: Download the Files from Remote repo to Local workspace
        run: |
          if (Test-Path "AVA-DATABRICKS-QMC-POC") {
            Write-Host "Folder exists. Pulling latest changes..."
            Set-Location AVA-DATABRICKS-QMC-POC
            git pull origin main
            Set-Location ..
          } else {
            Write-Host "Folder does not exist. Cloning the repository..."
            git clone --branch main "${{ vars.REPO_PAT }}"
          }

      # Step 4: Synchronize Local Folder with Databricks
      - name: Synchronize Local folder with databricks
        run: |
          cd AVA-DATABRICKS-QMC-POC
          databricks sync Notebooks /Workspace/Shared
