name: Databricks Deployment Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy-to-dev:
    runs-on: self-hosted
    steps:
      # Step 1: Check if Databricks CLI is installed
      - name: Check if Databricks CLI is installed
        id: check-databricks-cli
        shell: pwsh
        run: |
          if (-not (Get-Command databricks -ErrorAction SilentlyContinue)) {
            Write-Output "Databricks CLI not found. Installing Databricks CLI..."
            echo "cli_installed=false" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
            Write-Output "Databricks CLI is already installed."
            echo "cli_installed=true" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

      # Step 2: Install Databricks CLI if not installed
      - name: Install Databricks CLI
        if: env.cli_installed == 'false'
        shell: pwsh
        run: |
          Write-Output "Installing Databricks CLI..."
          pip install databricks-cli
          databricks --version
          Write-Output "Databricks CLI has been installed successfully."

      # Step 3: Authenticate Dev Databricks Workspace
      - name: Authenticate Dev Databricks Workspace
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path ~/.databricks -Force
          @"
          [DEFAULT]
          host = "${{ vars.QA_DATABRICKS_HOST }}"
          token = "${{ secrets.QA_DATABRICKS_TOKEN }}"
          "@ | Out-File -FilePath ~/.databrickscfg -Encoding UTF8
          # No equivalent of chmod on Windows, but file permissions are managed differently.
          databricks auth profiles

      # Step 4: Download Files from Remote Repository
      - name: Download Files from Remote Repository
        shell: pwsh
        run: |
          if (Test-Path -Path "Databricks_Notebooks") {
            Write-Output "Folder exists. Pulling latest changes..."
            Set-Location Databricks_Notebooks
            git pull origin main
            Set-Location ..
          } else {
            Write-Output "Folder does not exist. Cloning the repository..."
            git clone --branch main "${{ vars.repo_url }}" Databricks_Notebooks
          }

      # Step 5: Synchronize Local Folder with Dev Databricks Workspace
      - name: Synchronize Local Folder with Dev Databricks Workspace
        shell: pwsh
        run: |
          Set-Location Databricks_Notebooks
          databricks sync Notebooks /Workspace/Shared/
          Write-Output "Notebooks deployed to Dev Databricks Workspace."