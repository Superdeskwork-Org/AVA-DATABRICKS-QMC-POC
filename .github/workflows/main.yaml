name: Databricks Deployment

on:
  push:
    branches:
      - main

jobs:
  pre-deployment-approval:
    runs-on: self-hosted
    environment: pre-deployment-approval
    steps:
      - name: Request Pre-Deployment Approval
        run: echo "Pre-deployment approval requested. Waiting for approver to approve."

  deploy-to-dev:
    needs: pre-deployment-approval
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    steps:
      # Step 1: Check if Databricks CLI is installed
      - name: Check if Databricks CLI is installed
        run: |
          if (-not (Get-Command databricks -ErrorAction SilentlyContinue)) {
            Write-Host "Databricks CLI not found. Please install the Databricks CLI on the runner."
            exit 1
          } else {
            Write-Host "Databricks CLI is already installed."
          }

      # Step 2: Authenticate Dev Databricks Workspace
      - name: Authenticate Dev Databricks Workspace
        run: |
          New-Item -ItemType Directory -Force -Path $env:USERPROFILE\.databricks
          @"
          [DEFAULT]
          host = "${{ vars.QA_DATABRICKS_HOST }}"
          client_id = "${{ secrets.QA_DATABRICKS_CLIENT_ID }}"
          client_secret = "${{ secrets.QA_DATABRICKS_CLIENT_SECRET }}"
          "@ | Out-File -FilePath "$env:USERPROFILE\.databrickscfg" -Encoding utf8
          icacls "$env:USERPROFILE\.databrickscfg" /inheritance:r /grant:r "$env:USERNAME`:F"
          databricks auth profiles

      # Step 3: Backup Current State Before Deployment
      - name: Backup Current State
        run: |
          Write-Host "Backing up the current state of the Databricks workspace..."
          databricks workspace export_dir /Workspace/Shared ./backup_shared
          Write-Host "Backup completed successfully."

      # Step 4: Download Files from Remote Repository to Local Workspace
      - name: Download the Files from Remote repo to Local workspace
        run: |
          if (Test-Path "QA") {
            Write-Host "Folder exists. Pulling latest changes..."
            Set-Location QA
            Set-Location AVA-DATABRICKS-QMC-POC
            git pull origin main
            Set-Location ..
            Set-Location ..
          } else {
            Write-Host "Folder does not exist. Creating 'QA' folder and cloning the repository..."
            New-Item -ItemType Directory -Path "QA"  # Create the 'QA' folder
            Set-Location QA
            git clone --branch main "${{ vars.REPO_PAT }}" AVA-DATABRICKS-QMC-POC  # Clone into the 'AVA-DATABRICKS-QMC-POC' subfolder
            Set-Location ..
          }

      # Step 5: Synchronize Local Folder with Databricks
      - name: Synchronize Local folder with Databricks
        run: |
          cd QA
          cd AVA-DATABRICKS-QMC-POC
          databricks sync Notebooks /Workspace/Shared

  post-deployment-approval:
    needs: deploy-to-dev
    runs-on: self-hosted
    environment: post-deployment-approval
    steps:
      - name: Request Post-Deployment Approval
        id: post-deployment-approval-step
        run: echo "Post-deployment approval requested. Waiting for QA approver to approve."

  rollback-changes:
    needs: post-deployment-approval
    if: failure() || (steps.post-deployment-approval-step.outcome == 'failure')
    runs-on: self-hosted
    steps:
      - name: Revert Changes to Previous State
        run: |
          Write-Host "Rolling back changes to the previous state..."
          if (Test-Path "./backup_shared") {
            Write-Host "Restoring from backup..."
            databricks workspace import_dir ./backup_shared /Workspace/Shared --overwrite
            Write-Host "Rollback completed successfully."
          } else {
            Write-Host "No backup found. Unable to rollback changes."
            exit 1
          }
