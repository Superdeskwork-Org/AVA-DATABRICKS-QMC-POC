name: Databricks Deployment and Rollback

on:
  # Trigger on push to main branch for deployment
  push:
    branches:
      - main

  # Trigger manually via workflow_dispatch for rollback
  workflow_dispatch:
    inputs:
      action:
        description: "Choose action"
        required: true
        type: choice
        options:
          - Approve
          - Reject

jobs:
  pre-deployment-approval:
    runs-on: self-hosted
    environment: pre-deployment-approval
    steps:
      - name: Request Pre-Deployment Approval
        run: echo "Pre-deployment approval requested. Waiting for approver to approve."

  deploy-to-dev:
    needs: pre-deployment-approval
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    steps:
      # Step 1: Check if Databricks CLI is installed
      - name: Check if Databricks CLI is installed
        run: |
          if (-not (Get-Command databricks -ErrorAction SilentlyContinue)) {
            Write-Host "Databricks CLI not found. Please install the Databricks CLI on the runner."
          } else {
            Write-Host "Databricks CLI is already installed."
          }

      # Step 2: Authenticate Dev Databricks Workspace
      - name: Authenticate Dev Databricks Workspace
        run: |
          New-Item -ItemType Directory -Force -Path $env:USERPROFILE\.databricks
          @"
          [DEFAULT]
          host = "${{ vars.QA_DATABRICKS_HOST }}"
          client_id = "${{ secrets.QA_DATABRICKS_CLIENT_ID }}"
          client_secret = "${{ secrets.QA_DATABRICKS_CLIENT_SECRET }}"
          "@ | Out-File -FilePath "$env:USERPROFILE\.databrickscfg" -Encoding utf8
          icacls "$env:USERPROFILE\.databrickscfg" /inheritance:r /grant:r "$env:USERNAME`:F"
          databricks auth profiles

      # Step 3: Download Files from Remote Repository to Local Workspace
      - name: Download the Files from Remote repo to Local workspace
        run: |
          if (Test-Path "QA") {
            Write-Host "Folder exists. Pulling latest changes..."
            Set-Location QA
            Set-Location AVA-DATABRICKS-QMC-POC
            git pull origin main
            Set-Location ..
            Set-Location ..
          } else {
            Write-Host "Folder does not exist. Creating 'QA' folder and cloning the repository..."
            New-Item -ItemType Directory -Path "QA"  # Create the 'QA' folder
            Set-Location QA
            git clone --branch main "${{ vars.REPO_PAT }}" AVA-DATABRICKS-QMC-POC  # Clone into the 'AVA-DATABRICKS-QMC-POC' subfolder
            Set-Location ..
          }

      # Step 4: Synchronize Local Folder with Databricks
      - name: Synchronize Local folder with Databricks
        run: |
          cd QA
          cd AVA-DATABRICKS-QMC-POC
          databricks sync Notebooks /Workspace/Shared/Notebooks

  rollback-steps:
    runs-on: self-hosted
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'reject'
    steps:
      # Step 1: Simulate Manual Approval with Inputs
      - name: Simulate Post-Deployment Approval
        run: |
          echo "Post-deployment approval requested. Waiting for QA approver to approve."
          echo "Selected action: ${{ github.event.inputs.action }}"
          $ACTION = "${{ github.event.inputs.action }}".ToLower()  # Normalize to lowercase in PowerShell
          echo "action=$ACTION" >> $env:GITHUB_ENV

      # Debug Action Variable
      - name: Debug Action Variable
        run: |
          echo "Action variable value: ${{ env.action }}"

      # Step 2: Check Out Repository
      - name: Check Out Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all commits to access the previous commit ID

      # Debug Commit History
      - name: Debug Commit History
        run: |
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Previous commit: $(git rev-parse HEAD^)"

      # Step 3: Revert to Previous Commit if Rejected
      - name: Revert to Previous Commit
        run: |
          echo "Reverting deployment to previous commit..."
          $PREVIOUS_COMMIT_ID = git rev-parse HEAD^  # Get the previous commit ID
          echo "Previous commit ID: $PREVIOUS_COMMIT_ID"
          git checkout $PREVIOUS_COMMIT_ID

      # Step 4: Redeploy Application
      - name: Redeploy Application
        run: |
          echo "Redeploying application from commit: ${{ env.PREVIOUS_COMMIT_ID }}"
          cd QA
          cd AVA-DATABRICKS-QMC-POC
          databricks sync Notebooks /Workspace/Shared/Notebooks
          echo "Deployment reverted successfully."

      # Step 5: Confirm Approval
      - name: Confirm Approval
        if: github.event.inputs.action == 'approve'
        run: |
          echo "Deployment approved. No further action required."
